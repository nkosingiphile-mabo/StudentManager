/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package StudentManagementSystem;

/*** IMPORTS ***/

import java.awt.event.KeyEvent;
import java.io.*;
import java.util.Arrays;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
/**
 *
 * @author user pc
 */
public class Form extends javax.swing.JFrame {

    /**
     * Creates new form Form
     */
    public Form() {
        initComponents();
        ReadFile();
    }

    
    /*** STUDENT ARRAY ***/
    CollegeStudent[] students = new CollegeStudent[100];
    
    /*** READ THE TEXT FILE ***/
    private void ReadFile()
    {
        try{
          FileInputStream file = new FileInputStream("Students.txt"); 
          Scanner read = new Scanner(file);
          
          DefaultTableModel tableModel1 = (DefaultTableModel) jTable1.getModel();
          tableModel1.setRowCount(0);
          
          while(read.hasNext())
          {
              String[] line = read.nextLine().split(",");
              tableModel1.addRow(line);
          }
        }
        catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Warning\nThis Application Retrieves Data From A File, Currently File Does Not Exist!");
        }
    }
    
    /*** SEARCH A PARTICULAR STUDENT BY ID ***/
    private void searchTable(String searchText) {
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>((DefaultTableModel) jTable1.getModel());
        jTable1.setRowSorter(sorter);
        sorter.setRowFilter(RowFilter.regexFilter(searchText));
    }
    
    /*** DISPLAY ALL STUDENTS IN THE TABLE ***/
    private void displayAll() {
    TableRowSorter<DefaultTableModel> sorter = (TableRowSorter<DefaultTableModel>) jTable1.getRowSorter();
    sorter.setRowFilter(null);
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        label8 = new java.awt.Label();
        txtStudentID = new java.awt.TextField();
        label9 = new java.awt.Label();
        txtFullName = new java.awt.TextField();
        txtAge = new java.awt.TextField();
        label10 = new java.awt.Label();
        txtGrade = new java.awt.TextField();
        label11 = new java.awt.Label();
        txtMajor = new java.awt.TextField();
        label12 = new java.awt.Label();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        txtSearch = new java.awt.TextField();
        btnSearch = new java.awt.Button();
        jPanel3 = new javax.swing.JPanel();
        btnSave = new java.awt.Button();
        btnUpdate = new java.awt.Button();
        btnRemove = new java.awt.Button();
        btnClear1 = new java.awt.Button();
        btnDisplay = new java.awt.Button();
        jPanel5 = new javax.swing.JPanel();
        label1 = new java.awt.Label();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        exitMenu = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ADVANCED PROGRAMMING - PROJECT");
        setAutoRequestFocus(false);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(954, 204, -1, -1));

        jPanel2.setBackground(new java.awt.Color(204, 204, 255));

        jPanel11.setBackground(new java.awt.Color(255, 255, 255));

        label8.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        label8.setText("Student ID");

        txtStudentID.setBackground(new java.awt.Color(204, 204, 255));
        txtStudentID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStudentIDActionPerformed(evt);
            }
        });
        txtStudentID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtStudentIDKeyPressed(evt);
            }
        });

        label9.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        label9.setText("Full Name");

        txtFullName.setBackground(new java.awt.Color(204, 204, 255));

        txtAge.setBackground(new java.awt.Color(204, 204, 255));
        txtAge.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtAgeKeyPressed(evt);
            }
        });

        label10.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        label10.setText("Age");

        txtGrade.setBackground(new java.awt.Color(204, 204, 255));

        label11.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        label11.setText("Grade");

        txtMajor.setBackground(new java.awt.Color(204, 204, 255));

        label12.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        label12.setText("Major");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(label8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(label10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(label11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(label12, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtFullName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                    .addComponent(txtAge, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtGrade, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtMajor, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtStudentID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtStudentID, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(label9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFullName, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtMajor, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student ID", "Fulll Name", "Age", "Grade", "Major"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        btnSearch.setBackground(new java.awt.Color(153, 255, 51));
        btnSearch.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(255, 255, 255));
        btnSearch.setLabel("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnSave.setBackground(java.awt.Color.lightGray);
        btnSave.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        btnSave.setLabel("ADD");
        btnSave.setName("ADD"); // NOI18N
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(java.awt.Color.lightGray);
        btnUpdate.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        btnUpdate.setLabel("UPDATE");
        btnUpdate.setName("ADD"); // NOI18N
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnRemove.setBackground(java.awt.Color.lightGray);
        btnRemove.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        btnRemove.setLabel("REMOVE");
        btnRemove.setName("CLEAR"); // NOI18N
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnClear1.setBackground(java.awt.Color.lightGray);
        btnClear1.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        btnClear1.setLabel("CLEAR");
        btnClear1.setName("CLEAR"); // NOI18N
        btnClear1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClear1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClear1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(81, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        btnDisplay.setBackground(new java.awt.Color(153, 255, 51));
        btnDisplay.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        btnDisplay.setForeground(new java.awt.Color(255, 255, 255));
        btnDisplay.setLabel("Display");
        btnDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisplayActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(260, 260, 260)
                        .addComponent(btnDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addGap(0, 268, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 660, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(btnDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(68, 68, 68)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(60, 60, 60)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(135, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, -1, -1));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        label1.setAlignment(java.awt.Label.CENTER);
        label1.setFont(new java.awt.Font("Georgia", 1, 36)); // NOI18N
        label1.setText("Student Management System");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(195, 195, 195)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(200, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 938, -1));

        jMenu1.setText("File");

        exitMenu.setText("Exit");
        exitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuActionPerformed(evt);
            }
        });
        jMenu1.add(exitMenu);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");

        jMenuItem2.setText("About");
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtStudentIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStudentIDActionPerformed

    }//GEN-LAST:event_txtStudentIDActionPerformed

    private void txtStudentIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStudentIDKeyPressed
        /*** PREVENT USER FROM ENTERING LETTERS ***/
        String value = txtStudentID.getText();
        int l = value.length();
        if (evt.getKeyChar() >= '0' && evt.getKeyChar() <= '9' || evt.getKeyCode() == KeyEvent.VK_BACK_SPACE || l > 8) {
           txtStudentID.setEditable(true);
        } else {
           txtStudentID.setEditable(false);
        }
    }//GEN-LAST:event_txtStudentIDKeyPressed

    private void txtAgeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAgeKeyPressed
        /*** PREVENT USER FROM ENTERING LETTERS ***/
        String value = txtAge.getText();
        int l = value.length();
        if (evt.getKeyChar() >= '0' && evt.getKeyChar() <= '9' || evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
           txtAge.setEditable(true);
        } else {
           txtAge.setEditable(false);
        }
    }//GEN-LAST:event_txtAgeKeyPressed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        DefaultTableModel cell = (DefaultTableModel) jTable1.getModel();
        int rowIndex = jTable1.getSelectedRow();

        txtStudentID.setText(cell.getValueAt(rowIndex,0).toString());
        txtFullName.setText(cell.getValueAt(rowIndex,1).toString());
        txtAge.setText(cell.getValueAt(rowIndex,2).toString());
        txtGrade.setText(cell.getValueAt(rowIndex,3).toString());
        txtMajor.setText(cell.getValueAt(rowIndex,4).toString());
    }//GEN-LAST:event_jTable1MouseClicked

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String searchText = txtSearch.getText();
        
        boolean availableID = false;

        DefaultTableModel cell = (DefaultTableModel) jTable1.getModel();
        int rowCount = cell.getRowCount();

        for(int count = 0; count < rowCount; count++){
            if(searchText.equals(cell.getValueAt(count, 0).toString().trim())){
                availableID = true;
            }
        }
        
        if(searchText.isEmpty()){
            JOptionPane.showMessageDialog(null, "Please Enter Student Number");
        }
        else{
            if(availableID){
            searchTable(searchText);
            txtSearch.setText(null);
            }
            else{
                JOptionPane.showMessageDialog(null, "Results Not Found!");
            }
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        String studentID = txtStudentID.getText();
        String fullName = txtFullName.getText();
        String age = txtAge.getText();
        String grade = txtGrade.getText();
        String major = txtMajor.getText();
        boolean duplicateID = false;

        DefaultTableModel cell = (DefaultTableModel) jTable1.getModel();
        int rowCount = cell.getRowCount();

        for(int count = 0; count < rowCount; count++){
            if(studentID.equals(cell.getValueAt(count, 0).toString().trim())){
                duplicateID = true;
            }
        }

        if(duplicateID){
            JOptionPane.showMessageDialog(null, "Error!\nCannot Have More Than One Student Number");
        }
        else if(studentID.isEmpty() || fullName.isEmpty() ||  age.isEmpty() || grade.isEmpty() || major.isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Please Input All Fields");
        }
        else if(studentID.length() != 8){
            JOptionPane.showMessageDialog(null, "Invalid Student Number(8)");
        }
        else if(age.length() != 2){
            JOptionPane.showMessageDialog(null, "Possible Invalid Student Age");
        }
        else{
            try{
                FileOutputStream file = new FileOutputStream("Students.txt",true);
                PrintWriter write = new PrintWriter(file);

                CollegeStudent student = new CollegeStudent(Integer.parseInt(studentID),fullName,Integer.parseInt(age),grade,major);

                write.print(student.getStudentID());
                write.print(",");
                write.print(student.getName());
                write.print(",");
                write.print(student.getAge());
                write.print(",");
                write.print(student.getGrade());
                write.print(",");
                write.print(student.getMajor());
                write.println();

                JOptionPane.showMessageDialog(null, "Student Loaded Successful!");
                write.close();
                file.close();
                ReadFile();

                txtStudentID.setText(null);
                txtFullName.setText(null);
                txtAge.setText(null);
                txtGrade.setText(null);
                txtMajor.setText(null);
            }
            catch(Exception ex){
                JOptionPane.showMessageDialog(null, "Error!!!\nCould Not Add The Student!!!");
            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        int studentID = 0;
        if(!txtStudentID.getText().trim().isEmpty()){
            studentID = Integer.parseInt(txtStudentID.getText().trim());
        }
        String fullName = txtFullName.getText().trim();
        int age = 0;
        if(!txtAge.getText().trim().isEmpty()){
            age = Integer.parseInt(txtAge.getText().trim());
        }
        String grade = txtGrade.getText().trim();
        String major = txtMajor.getText().trim();

        if(txtStudentID.getText().isEmpty()|| fullName.isEmpty() ||  txtAge.getText().isEmpty() || grade.isEmpty() || major.isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Please select student from the table or enter student ID of a student you want to Delete");
            System.out.println(studentID);
        }
        else{
            try{
                FileOutputStream file = new FileOutputStream("Students.txt");
                PrintWriter write = new PrintWriter(file);

                DefaultTableModel cell = (DefaultTableModel) jTable1.getModel();
                int rowIndex = jTable1.getSelectedRow();

                int rowCount = cell.getRowCount();
                students = new CollegeStudent[rowCount];

                for (int count = 0; count < rowCount; count++) {
                    students[count] = new CollegeStudent();

                    students[count].setStudentID(Integer.parseInt(cell.getValueAt(count, 0).toString().trim()));
                    students[count].setName(cell.getValueAt(count, 1).toString().trim());
                    students[count].setAge(Integer.parseInt(cell.getValueAt(count, 2).toString().trim()));
                    students[count].setGrade(cell.getValueAt(count, 3).toString().trim());
                    students[count].setMajor(cell.getValueAt(count, 4).toString().trim());
                }

                for (int i = rowIndex; i < students.length - 1; i++) {
                    students[i] = students[i + 1];
                }

                students[students.length - 1] = null;

                students = Arrays.copyOf(students, students.length - 1);

                for (CollegeStudent student : students) {
                    write.print(student.getStudentID());
                    write.print(",");
                    write.print(student.getName());
                    write.print(",");
                    write.print(student.getAge());
                    write.print(",");
                    write.print(student.getGrade());
                    write.print(",");
                    write.print(student.getMajor());
                    write.println();
                }

                JOptionPane.showMessageDialog(null, "Student Successfully Deleted!");
                write.close();
                file.close();
                ReadFile();

                txtStudentID.setText(null);
                txtFullName.setText(null);
                txtAge.setText(null);
                txtGrade.setText(null);
                txtMajor.setText(null);
            }
            catch(Exception ex){
                JOptionPane.showMessageDialog(null, "Error!\nSomething went wrong!!!");
                System.out.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        int studentID = 0;
        if(!txtStudentID.getText().trim().isEmpty()){
            studentID = Integer.parseInt(txtStudentID.getText().trim());
        }
        String fullName = txtFullName.getText().trim();
        int age = 0;
        if(!txtAge.getText().trim().isEmpty()){
            age = Integer.parseInt(txtAge.getText().trim());
        }
        String grade = txtGrade.getText().trim();
        String major = txtMajor.getText().trim();

        if(txtStudentID.getText().isEmpty()|| fullName.isEmpty() ||  txtAge.getText().isEmpty() || grade.isEmpty() || major.isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Please select student from the table or enter student ID of a student you want to Delete");
            System.out.println(studentID);
        }
        else if(txtStudentID.getText().length() != 8){
            JOptionPane.showMessageDialog(null, "Invalid Student ID (8 characters)");
        }
        else{
            try{
                FileOutputStream file = new FileOutputStream("Students.txt");
                PrintWriter write = new PrintWriter(file);

                DefaultTableModel cell = (DefaultTableModel) jTable1.getModel();
                int rowIndex = jTable1.getSelectedRow();

                int rowCount = cell.getRowCount();
                students = new CollegeStudent[rowCount];

                for (int count = 0; count < rowCount; count++) {
                    students[count] = new CollegeStudent();

                    students[count].setStudentID(Integer.parseInt(cell.getValueAt(count, 0).toString().trim()));
                    students[count].setName(cell.getValueAt(count, 1).toString().trim());
                    students[count].setAge(Integer.parseInt(cell.getValueAt(count, 2).toString().trim()));
                    students[count].setGrade(cell.getValueAt(count, 3).toString().trim());
                    students[count].setMajor(cell.getValueAt(count, 4).toString().trim());
                }

                students[rowIndex].setStudentID(studentID);
                students[rowIndex].setName(fullName);
                students[rowIndex].setAge(age);
                students[rowIndex].setGrade(grade);
                students[rowIndex].setMajor(major);

                for (CollegeStudent student : students) {
                    write.print(student.getStudentID());
                    write.print(",");
                    write.print(student.getName());
                    write.print(",");
                    write.print(student.getAge());
                    write.print(",");
                    write.print(student.getGrade());
                    write.print(",");
                    write.print(student.getMajor());
                    write.println();
                }

                JOptionPane.showMessageDialog(null, "Student Updated Successfully!");
                write.close();
                file.close();
                ReadFile();

                txtStudentID.setText(null);
                txtFullName.setText(null);
                txtAge.setText(null);
                txtGrade.setText(null);
                txtMajor.setText(null);
            }
            catch(Exception ex){
                JOptionPane.showMessageDialog(null, "Error!\nSomething went wrong!!!");
                System.out.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnClear1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClear1ActionPerformed
        txtStudentID.setText(null);
        txtFullName.setText(null);
        txtAge.setText(null);
        txtGrade.setText(null);
        txtMajor.setText(null);
    }//GEN-LAST:event_btnClear1ActionPerformed

    private void exitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuActionPerformed

    private void btnDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisplayActionPerformed
        //ReadFile();
        displayAll();   
    }//GEN-LAST:event_btnDisplayActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Form form = new Form();
                form.setLocationRelativeTo(null);
                form.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button btnClear1;
    private java.awt.Button btnDisplay;
    private java.awt.Button btnRemove;
    private java.awt.Button btnSave;
    private java.awt.Button btnSearch;
    private java.awt.Button btnUpdate;
    private javax.swing.JMenuItem exitMenu;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private java.awt.Label label1;
    private java.awt.Label label10;
    private java.awt.Label label11;
    private java.awt.Label label12;
    private java.awt.Label label8;
    private java.awt.Label label9;
    private java.awt.TextField txtAge;
    private java.awt.TextField txtFullName;
    private java.awt.TextField txtGrade;
    private java.awt.TextField txtMajor;
    private java.awt.TextField txtSearch;
    private java.awt.TextField txtStudentID;
    // End of variables declaration//GEN-END:variables
}
